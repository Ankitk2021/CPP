vector<pair<int, int>> getLeft(vector<int> &arr)
{
    vector<pair<int, int>> v;
    int n = arr.size();
    // arr[i],nsl index

    stack<pair<int, int>> s;
    // for compare , index

    for (int i = 0; i < n; i++)
    {

        if (s.empty())
        {

            v.push_back({arr[i], -1});
        }
        else
        {

            if (s.top().first < arr[i])
            {
                v.push_back({arr[i], s.top().second});
            }
            else
            {

                while (!s.empty() && !
                (s.top().first < arr[i]))
                {
                    s.pop();
                }

                if (s.empty())
                {
                    v.push_back({arr[i], -1});
                }
                else
                {
                    v.push_back({arr[i], s.top().second});
                }
            }
        }
        s.push({arr[i], i});
    }

    return v;
}

vector<pair<int, int>> getRight(vector<int> &arr)
{

    stack<pair<int, int>> s;
    vector<pair<int, int>> v;

    int n = arr.size();

    for (int i = n - 1; i >= 0; i--)
    {

        if (s.empty())
        {

            v.push_back({arr[i], n});
        }
        else if (!s.empty() && s.top().first < arr[i])
        {
            v.push_back({arr[i], s.top().second});
        }
        else
        {

            while (!s.empty() && !(s.top().first < arr[i]))
                s.pop();

            if (s.empty())
            {
                v.push_back({arr[i], n});
            }
            else
            {
                v.push_back({arr[i], s.top().second});
            }
        }

        s.push({arr[i], i});
    }

    reverse(v.begin(), v.end());
    return v;
}

vector<pair<int, int>> getWidth(vector<pair<int, int>> &left, vector<pair<int, int>> &right)
{

    vector<pair<int, int>> w;
    int n1 = left.size();
    int n2 = right.size();

    if (n1 == n2)
    {
        for (int i = 0; i < n1; i++)
        {
            int width = right[i].second - left[i].second - 1;
            w.push_back({left[i].first, width});
        }
    }

    return w;
}

int solve(vector<int> &v)
{
    vector<pair<int, int>> vl = getLeft(v);
    vector<pair<int, int>> vr = getRight(v);
    vector<pair<int, int>> w = getWidth(vl, vr);
long long maxi = -1;
    for(pair<int,int> p : w){
    long long area = p.first * p.second;
    maxi = max(maxi,area);
    }

    return maxi;
}
    
    int getMaxArea(vector<int> &arr) {
        // code here
        
        return solve(arr);
    }

ðŸ‘† Can be concise.
