    Node* findIntersection(Node* head1, Node* head2) {
        // code here
        if(!head1 || !head2 ) return NULL;
        
        map<int , int> mpp;
        Node* temp = head2;
       
        Node* dummy = new Node(-1);
        Node* temp2 = dummy;
        
        while(temp){
            mpp[temp->data]++;
            temp = temp->next;
        }
        temp = head1;
        
        while(temp){
            
            if(mpp[temp->data] > 0){
                
                temp2->next = temp;
                temp2 = temp2->next;
                
            }
            
            temp = temp->next;
        }
        
        temp2->next = NULL;
        
        return dummy->next;
    }











    ListNode* findInter(ListNode* headA,ListNode* headB, int diff){
     
     if(!headA) return NULL;
     if(!headB) return NULL;

     while(headA != headB) {
        headA = headA->next;
        headB = headB->next;
     }

     if(headA == headB) return headA;
     return NULL;
    }
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {

        int n1 = 0;
        ListNode* temp  =  headA;

        while(temp){
            n1++;
            temp = temp->next;
        }

        int n2 = 0;
        temp = headB;

         while(temp){
            n2++;
            temp = temp->next;
        }
        ListNode* temp1 = headA;
        ListNode* temp2 = headB;

        if(n1>n2){
          
          int diff = n1-n2;
          while(diff){  
          temp1 = temp1->next;
          diff--;
          }
          return findInter(temp1,temp2,diff);

        }else{
            int diff = n2-n1;
          while(diff){
          temp2 = temp2->next;
          diff--;
          }
          return findInter(temp1,temp2,diff); 
        }

        return NULL;
        
    }



    ListNode* getIntersectionNode(ListNode* headA, ListNode* headB) {
        ListNode* temp1 = headA;
        ListNode* temp2 = headB;

        while (temp1 != temp2) {

            if (temp1->next == NULL && temp2->next == NULL) {
                return NULL;
            } else if (temp1->next == NULL) {
                // temp1->next = headB;  This line will change the actual
                // structure of actual Linked List instaed do this .same for
                // temp 2

                temp1 = headB;
                temp2 = temp2->next;

            } else if (temp2->next == NULL) {
                // temp2->next = headA;

                temp2 = headA;
                temp1 = temp1->next;
            }else{
                 temp1 = temp1->next;
                 temp2 = temp2->next;
            }
        }
        return (temp1 == temp2 ? temp1 : NULL);
    }
