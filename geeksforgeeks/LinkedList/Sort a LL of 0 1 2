    Node* segregate(Node* head) {
        // code here
        int n0 = 0;
        int n1 = 0;
        int n2 = 0;
        Node* temp = head;
        while(temp) {
            if(temp->data == 0) {
             n0++;   
            }else if(temp->data == 1){
              n1++;  
            }else if(temp->data == 2){
              n2++;  
            }
            
            temp = temp->next;
        }
        temp = head;
        
        while(temp && n0>0){
            temp->data = 0;
            n0--;
            temp = temp->next;
        }
        
        while(temp && n1>0){
            temp->data = 1;
            n1--;
            temp = temp->next;
        }
        
        while(temp && n2>0){
            temp->data = 2;
            n2--;
            temp = temp->next;
        }
        
        return head;
    }








    Node* segregate(Node* head) {
        // code here
        if(!head || !head->next) return head;
      
        
        
        Node* dummy0 = new Node(-1);
        Node* dummy1 = new Node(-1);
        Node* dummy2 = new Node(-1);
        
       Node* temp0 = dummy0;
       Node* temp1 = dummy1;
       Node* temp2 = dummy2;
        //These for traversal
        
        Node* temp = head; // for traversal on main LL
        
    while(temp){
        if(temp->data == 0){
            temp0->next = temp;
            temp0 = temp0->next;
        }else if(temp->data == 1){
            temp1->next = temp;
            temp1 = temp1->next;
        }else if(temp->data== 2){
            temp2->next = temp;
            temp2 = temp2->next;
        }
        
        temp = temp->next;
    }
    
     temp0->next = (dummy1->next != NULL ) ? dummy1->next : dummy2->next;
     temp1->next = dummy2->next;
     temp2->next = NULL;
      
      Node* newHead = dummy0->next;
     
     delete(dummy0);
     delete(dummy1);
     delete(dummy2);
       
        return newHead;
    }
